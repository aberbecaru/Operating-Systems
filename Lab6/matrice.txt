#include<unistd.h>

#include<stdio.h>

#include<pthread.h>

#include<string.h>

#include<errno.h>

#include<stdlib.h>



int n1, m1, i, j, n2, m2, a1[101][101], a2[101][101], raspuns[101][101], s;







void * inmultire (void *v){

	

	int j1, j2;

	

	int *val = (int *) v;

	

	s = 0;

	

	for(j1 = 0, j2 = 0; j1<m1, j2<n2; j1++, j2++){

		s = s + a1[val[0]][j1] * a2[j2][val[1]];

	}

	

	raspuns[val[0]][val[1]] = s;

	free(v);

	

	return NULL;

}



int main(int argc, char* argv[]){



	if(argc != 5){

		perror(NULL);

		return errno;

	}



	n1 = atoi(argv[1]);

	m1 = atoi(argv[2]);

	n2 = atoi(argv[3]);

	m2 = atoi(argv[4]);

	

	for(i = 0; i<n1; i++){

		for(j = 0; j<m1; j++){

			scanf("%d", &a1[i][j]);

		}

	}

	

	

	

	

	for(i = 0; i<n2; i++){

		for(j = 0; j<m2; j++){

			scanf("%d", &a2[i][j]);

		}

	}

	

	pthread_t thr[n1*m1];

	int k = 0;

	

	for(i = 0; i< n1; i++){

		for(j =0; j< m1; j++){

			

			int *t = malloc (2* sizeof (int));

			t[0] = i;

			t[1] = j;

			if ( pthread_create (& thr[k++] , NULL , inmultire, t)) {

				perror ( NULL );

				return errno ;

			}

			

			

		}

		

		

		

	}

	

	for(i = 0; i<n1*m1; i++){



	

		if ( pthread_join ( thr[i] , NULL)) {

					perror ( NULL );

					return errno ;

				}

	

	

	}

	

	for(i = 0; i<n1; i++){

		for(j = 0; j<m1; j++){

			printf("%d\t", raspuns[i][j]);

		}

		printf("\n");

	}

	

	

	return 0;

	

	

	

}