#include<unistd.h>

#include<errno.h>

#include<stdio.h>

#include<sys/types.h>

#include<sys/wait.h>

#include<stdlib.h>

#include<fcntl.h>

#include <sys/mman.h>

#define size 4096

int main(int argc, char* argv[]){

int n, i;



int shm_fd;

char *shm_name = "myshm";



shm_fd = shm_open(shm_name, O_CREAT | O_RDWR, S_IRUSR | S_IWUSR);



if(shm_fd == -1)

	return errno;



int shm_size = argc * size;



int ftrunc = ftruncate(shm_fd, shm_size);

if(ftrunc == -1){

	shm_unlink(shm_name);

	return errno;

}





for(i=1; i<argc; i++){

	pid_t pid = fork();

	if(pid<0)

		return errno;

	else

	if(pid == 0){

		n = atoi(argv[i]);

		if(i == 1)

			printf("Starting parent %d \n", getppid());

		if(n>0){

			char * shm_ptr = mmap(NULL, size, PROT_WRITE, MAP_SHARED, shm_fd, (i - 1) * size);



			if(shm_ptr == MAP_FAILED){

				shm_unlink(shm_name);

				return errno;

		   	 }

		   	 

		   	shm_ptr += sprintf(shm_ptr, "%d : %d ", n, n);

			

			while(n!=1){

				if(n%2 == 0)

					n /= 2;

				else 

					n = 3*n+1;

				

				shm_ptr += sprintf(shm_ptr, "%d ", n);

			}

			

			shm_ptr += sprintf(shm_ptr, "\n");

			printf("\n Done parent %d, Me %d \n", getppid(), getpid());

			munmap(shm_ptr, size);

			exit(0);

			

		}

		else

			printf("Wrong input");

			

		

	}

	else

		wait(NULL);

	

	   

	}

	

	for(int i = 1; i < argc; ++i){

        char* shm_ptr = mmap(NULL, size, PROT_READ, MAP_SHARED, shm_fd, (i-1) * size);

        if(shm_ptr == MAP_FAILED){

                shm_unlink(shm_name);

                return errno;

            }



        printf("%s", shm_ptr);

        munmap(shm_ptr, size);

    }

	

	

	printf("\n Done parent %d, Me %d \n", getppid(), getpid());

	

	shm_unlink(shm_name);

	return 0;

}